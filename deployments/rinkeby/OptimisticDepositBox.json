{
  "address": "0x2B529A051171Bd629322dB9979650190FB72949D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_finderAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_priceIdentifier",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_timerAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "EndedOptimisticDepositBox",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "NewOptimisticDepositBox",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalRequestTimestamp",
          "type": "uint256"
        }
      ],
      "name": "RequestWithdrawal",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalRequestTimestamp",
          "type": "uint256"
        }
      ],
      "name": "RequestWithdrawalCanceled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "exchangeRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalRequestTimestamp",
          "type": "uint256"
        }
      ],
      "name": "RequestWithdrawalExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "cancelWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralCurrency",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeWithdrawal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountWithdrawn",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "denominatedCollateralAmount",
          "type": "uint256"
        }
      ],
      "name": "requestWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "setCurrentTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalOptimisticDepositBoxCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x552569ba482e47e03e82b40f80a5f8cd4ee16b6582c2f1f8297c9c7e74ee4ab3",
  "receipt": {
    "to": null,
    "from": "0xB8034521BB1a343D556e5005680B3F17FFc74BeD",
    "contractAddress": "0x2B529A051171Bd629322dB9979650190FB72949D",
    "transactionIndex": 31,
    "gasUsed": "1344662",
    "logsBloom": "0x
    "blockHash": "0x0aadb1acac33df2e4be3e15ce694d07fd8cde75eae0bbd69d5908cea4ad120b2",
    "transactionHash": "0x552569ba482e47e03e82b40f80a5f8cd4ee16b6582c2f1f8297c9c7e74ee4ab3",
    "logs": [],
    "blockNumber": 10652475,
    "cumulativeGasUsed": "10328921",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00526C1ede46255b752D280620318ab50B24c20e",
    "0xbb6206fb01fAad31e8aaFc3AD303cEA89D8c8157",
    "0x566f6c6174696c69747944414f7261636c650000000000000000000000000000",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "2e1573a721e7fcdcb299fb01268975b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_finderAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_priceIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_timerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"EndedOptimisticDepositBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"NewOptimisticDepositBox\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalRequestTimestamp\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalRequestTimestamp\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawalCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalRequestTimestamp\",\"type\":\"uint256\"}],\"name\":\"RequestWithdrawalExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cancelWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountWithdrawn\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"denominatedCollateralAmount\",\"type\":\"uint256\"}],\"name\":\"requestWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"setCurrentTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalOptimisticDepositBoxCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_collateralAddress\":\"ERC20 token to be deposited.\",\"_finderAddress\":\"UMA protocol Finder used to discover other protocol contracts.\",\"_priceIdentifier\":\"registered in the DVM, used to price the ERC20 deposited. The price identifier consists of a \\\"base\\\" asset and a \\\"quote\\\" asset. The \\\"base\\\" asset corresponds to the collateral ERC20 currency deposited into this account, and it is denominated in the \\\"quote\\\" asset on withdrawals. An example price identifier would be \\\"ETH/USD\\\" which will resolve and return the USD price of ETH.\",\"_timerAddress\":\"contract that stores the current time in a testing environment. Must be set to 0x0 for production environments that use live time.\"}},\"deposit(uint256)\":{\"details\":\"This contract must be approved to spend at least `collateralAmount` of `collateralCurrency`.\",\"params\":{\"collateralAmount\":\"total amount of collateral tokens to be sent to the sponsor's position.\"}},\"executeWithdrawal()\":{\"details\":\"Might not withdraw the full requested amount in order to account for precision loss.\",\"returns\":{\"amountWithdrawn\":\"The actual amount of collateral withdrawn.\"}},\"getCollateral(address)\":{\"params\":{\"user\":\"address whose collateral amount is retrieved.\"},\"returns\":{\"_0\":\"the collateral amount in the deposit box (i.e. available for withdrawal).\"}},\"getCurrentTime()\":{\"returns\":{\"_0\":\"uint for the current Testable timestamp.\"}},\"requestWithdrawal(uint256)\":{\"details\":\"The request will be pending for the duration of the liveness period and can be cancelled at any time. Only one withdrawal request can exist for the user.\",\"params\":{\"denominatedCollateralAmount\":\"the quote-asset denominated amount of collateral requested to withdraw.\"}},\"setCurrentTime(uint256)\":{\"details\":\"Will revert if not running in test mode.\",\"params\":{\"time\":\"timestamp to set current Testable time to.\"}}},\"title\":\"Optimistic Token Deposit Box\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelWithdrawal()\":{\"notice\":\"Cancels a pending withdrawal request.\"},\"constructor\":{\"notice\":\"Construct the OptimisticDepositBox.\"},\"deposit(uint256)\":{\"notice\":\"Transfers `collateralAmount` of `collateralCurrency` into caller's deposit box.\"},\"executeWithdrawal()\":{\"notice\":\"After a withdrawal request (i.e., by a call to `requestWithdrawal`) and optimistic oracle price resolution, withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset.\"},\"getCollateral(address)\":{\"notice\":\"Accessor method for a user's collateral.\"},\"getCurrentTime()\":{\"notice\":\"Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp.\"},\"requestWithdrawal(uint256)\":{\"notice\":\"Starts a withdrawal request that allows the sponsor to withdraw `denominatedCollateralAmount` from their position denominated in the quote asset of the price identifier, following a Optimistic Oracle price resolution.\"},\"setCurrentTime(uint256)\":{\"notice\":\"Sets the current time.\"}},\"notice\":\"This is a minimal example of a financial template that depends on price requests from the Optimistic Oracle. This contract should be thought of as a \\\"Deposit Box\\\" into which the user deposits some ERC20 collateral. The main feature of this box is that the user can withdraw their ERC20 corresponding to a desired USD amount. When the user wants to make a withdrawal, a price request is made to the Optimistic Oracle. For simplicity, the user is constrained to have one outstanding withdrawal request at any given time. Final fees are charged to the proposer of a price but not to the contract making a price request. This example is intended to accompany a technical tutorial for how to integrate the Optimistic Oracle into a project. The main feature this demo serves to showcase is how to build a financial product on-chain that \\\"pulls\\\" price requests from the Optimistic Oracle on-demand, which is an implementation of the \\\"priceless\\\" oracle framework. The typical user flow would be: - User sets up a deposit box for the ETH/USD price-identifier.   The \\\"collateral currency\\\" in this deposit box is therefore wETH.   The user can subsequently make withdrawal requests for USD-denominated amounts of wETH. - User deposits 10 wETH into their deposit box. - User later requests to withdraw $10,000 USD of wETH. - OptimisticDepositBox asks Optimistic Oracle for latest ETH/USD exchange rate. - Optimistic Oracle resolves the exchange rate at: 1 wETH is worth 2000 USD. - OptimisticDepositBox transfers 5 wETH to user.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OptimisticDepositBox.sol\":\"OptimisticDepositBox\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SignedSafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SignedSafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SignedSafeMath {\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        return a + b;\\n    }\\n}\\n\",\"keccak256\":\"0x62f53f262fabbbc6d8ab49488d8fce36370351aff2b8d3898d499d68995a71c2\",\"license\":\"MIT\"},\"@uma/core/contracts/common/implementation/AddressWhitelist.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/AddressWhitelistInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./Lockable.sol\\\";\\n\\n/**\\n * @title A contract to track a whitelist of addresses.\\n */\\ncontract AddressWhitelist is AddressWhitelistInterface, Ownable, Lockable {\\n    enum Status { None, In, Out }\\n    mapping(address => Status) public whitelist;\\n\\n    address[] public whitelistIndices;\\n\\n    event AddedToWhitelist(address indexed addedAddress);\\n    event RemovedFromWhitelist(address indexed removedAddress);\\n\\n    /**\\n     * @notice Adds an address to the whitelist.\\n     * @param newElement the new address to add.\\n     */\\n    function addToWhitelist(address newElement) external override nonReentrant() onlyOwner {\\n        // Ignore if address is already included\\n        if (whitelist[newElement] == Status.In) {\\n            return;\\n        }\\n\\n        // Only append new addresses to the array, never a duplicate\\n        if (whitelist[newElement] == Status.None) {\\n            whitelistIndices.push(newElement);\\n        }\\n\\n        whitelist[newElement] = Status.In;\\n\\n        emit AddedToWhitelist(newElement);\\n    }\\n\\n    /**\\n     * @notice Removes an address from the whitelist.\\n     * @param elementToRemove the existing address to remove.\\n     */\\n    function removeFromWhitelist(address elementToRemove) external override nonReentrant() onlyOwner {\\n        if (whitelist[elementToRemove] != Status.Out) {\\n            whitelist[elementToRemove] = Status.Out;\\n            emit RemovedFromWhitelist(elementToRemove);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks whether an address is on the whitelist.\\n     * @param elementToCheck the address to check.\\n     * @return True if `elementToCheck` is on the whitelist, or False.\\n     */\\n    function isOnWhitelist(address elementToCheck) external view override nonReentrantView() returns (bool) {\\n        return whitelist[elementToCheck] == Status.In;\\n    }\\n\\n    /**\\n     * @notice Gets all addresses that are currently included in the whitelist.\\n     * @dev Note: This method skips over, but still iterates through addresses. It is possible for this call to run out\\n     * of gas if a large number of addresses have been removed. To reduce the likelihood of this unlikely scenario, we\\n     * can modify the implementation so that when addresses are removed, the last addresses in the array is moved to\\n     * the empty index.\\n     * @return activeWhitelist the list of addresses on the whitelist.\\n     */\\n    function getWhitelist() external view override nonReentrantView() returns (address[] memory activeWhitelist) {\\n        // Determine size of whitelist first\\n        uint256 activeCount = 0;\\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\\n            if (whitelist[whitelistIndices[i]] == Status.In) {\\n                activeCount++;\\n            }\\n        }\\n\\n        // Populate whitelist\\n        activeWhitelist = new address[](activeCount);\\n        activeCount = 0;\\n        for (uint256 i = 0; i < whitelistIndices.length; i++) {\\n            address addr = whitelistIndices[i];\\n            if (whitelist[addr] == Status.In) {\\n                activeWhitelist[activeCount] = addr;\\n                activeCount++;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1f20b925f9d37230aaf7bbee536f9a9b08e4772864f0a243ff1b69b54710fee\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/common/implementation/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SignedSafeMath.sol\\\";\\n\\n/**\\n * @title Library for fixed point arithmetic on uints\\n */\\nlibrary FixedPoint {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For unsigned values:\\n    //   This can represent a value up to (2^256 - 1)/10^18 = ~10^59. 10^59 will be stored internally as uint256 10^77.\\n    uint256 private constant FP_SCALING_FACTOR = 10**18;\\n\\n    // --------------------------------------- UNSIGNED -----------------------------------------------------------------------------\\n    struct Unsigned {\\n        uint256 rawValue;\\n    }\\n\\n    /**\\n     * @notice Constructs an `Unsigned` from an unscaled uint, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a uint to convert into a FixedPoint.\\n     * @return the converted FixedPoint.\\n     */\\n    function fromUnscaledUint(uint256 a) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.mul(FP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, Unsigned memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Unsigned memory a, uint256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledUint(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(uint256 a, Unsigned memory b) internal pure returns (bool) {\\n        return fromUnscaledUint(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Unsigned` to an unscaled uint, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return add(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Unsigned`s, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled uint256 from an `Unsigned`, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return sub(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Unsigned` from an unscaled uint256, reverting on overflow.\\n     * @param a a uint256.\\n     * @param b a FixedPoint.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return sub(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as a uint256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because FP_SCALING_FACTOR != 0.\\n        return Unsigned(a.rawValue.mul(b.rawValue) / FP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.\\n     * @param b a uint256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Unsigned`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 mulRaw = a.rawValue.mul(b.rawValue);\\n        uint256 mulFloor = mulRaw / FP_SCALING_FACTOR;\\n        uint256 mod = mulRaw.mod(FP_SCALING_FACTOR);\\n        if (mod != 0) {\\n            return Unsigned(mulFloor.add(1));\\n        } else {\\n            return Unsigned(mulFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Unsigned` and an unscaled uint256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.\\n     * @param b a FixedPoint.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Since b is an uint, there is no risk of truncation and we can just mul it normally\\n        return Unsigned(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as a uint256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Unsigned(a.rawValue.mul(FP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        return Unsigned(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled uint256 by an `Unsigned`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a uint256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(uint256 a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        return div(fromUnscaledUint(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an `Unsigned` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, Unsigned memory b) internal pure returns (Unsigned memory) {\\n        uint256 aScaled = a.rawValue.mul(FP_SCALING_FACTOR);\\n        uint256 divFloor = aScaled.div(b.rawValue);\\n        uint256 mod = aScaled.mod(b.rawValue);\\n        if (mod != 0) {\\n            return Unsigned(divFloor.add(1));\\n        } else {\\n            return Unsigned(divFloor);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Unsigned` by an unscaled uint256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divCeil(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Unsigned(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with a uint256 as the second parameter. Therefore we need to convert b into an Unsigned.\\n        // This creates the possibility of overflow if b is very large.\\n        return divCeil(a, fromUnscaledUint(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Unsigned` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint numerator.\\n     * @param b a uint256 denominator.\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Unsigned memory a, uint256 b) internal pure returns (Unsigned memory output) {\\n        output = fromUnscaledUint(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n\\n    // ------------------------------------------------- SIGNED -------------------------------------------------------------\\n    // Supports 18 decimals. E.g., 1e18 represents \\\"1\\\", 5e17 represents \\\"0.5\\\".\\n    // For signed values:\\n    //   This can represent a value up (or down) to +-(2^255 - 1)/10^18 = ~10^58. 10^58 will be stored internally as int256 10^76.\\n    int256 private constant SFP_SCALING_FACTOR = 10**18;\\n\\n    struct Signed {\\n        int256 rawValue;\\n    }\\n\\n    function fromSigned(Signed memory a) internal pure returns (Unsigned memory) {\\n        require(a.rawValue >= 0, \\\"Negative value provided\\\");\\n        return Unsigned(uint256(a.rawValue));\\n    }\\n\\n    function fromUnsigned(Unsigned memory a) internal pure returns (Signed memory) {\\n        require(a.rawValue <= uint256(type(int256).max), \\\"Unsigned too large\\\");\\n        return Signed(int256(a.rawValue));\\n    }\\n\\n    /**\\n     * @notice Constructs a `Signed` from an unscaled int, e.g., `b=5` gets stored internally as `5*(10**18)`.\\n     * @param a int to convert into a FixedPoint.Signed.\\n     * @return the converted FixedPoint.Signed.\\n     */\\n    function fromUnscaledInt(int256 a) internal pure returns (Signed memory) {\\n        return Signed(a.mul(SFP_SCALING_FACTOR));\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a int256.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue == fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if equal, or False.\\n     */\\n    function isEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue == b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue > fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a > b`, or False.\\n     */\\n    function isGreaterThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue > b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue >= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is greater than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a >= b`, or False.\\n     */\\n    function isGreaterThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue >= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue < fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a < b`, or False.\\n     */\\n    function isLessThan(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue < b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, Signed memory b) internal pure returns (bool) {\\n        return a.rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(Signed memory a, int256 b) internal pure returns (bool) {\\n        return a.rawValue <= fromUnscaledInt(b).rawValue;\\n    }\\n\\n    /**\\n     * @notice Whether `a` is less than or equal to `b`.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return True if `a <= b`, or False.\\n     */\\n    function isLessThanOrEqual(int256 a, Signed memory b) internal pure returns (bool) {\\n        return fromUnscaledInt(a).rawValue <= b.rawValue;\\n    }\\n\\n    /**\\n     * @notice The minimum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the minimum of `a` and `b`.\\n     */\\n    function min(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue < b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice The maximum of `a` and `b`.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the maximum of `a` and `b`.\\n     */\\n    function max(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return a.rawValue > b.rawValue ? a : b;\\n    }\\n\\n    /**\\n     * @notice Adds two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.add(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Adds an `Signed` to an unscaled int, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the sum of `a` and `b`.\\n     */\\n    function add(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return add(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts two `Signed`s, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.sub(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Subtracts an unscaled int256 from an `Signed`, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return sub(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Subtracts an `Signed` from an unscaled int256, reverting on overflow.\\n     * @param a an int256.\\n     * @param b a FixedPoint.Signed.\\n     * @return the difference of `a` and `b`.\\n     */\\n    function sub(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return sub(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max output for the represented number is ~10^41, otherwise an intermediate value overflows. 10^41 is\\n        // stored internally as an int256 ~10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 1.4 * 2e-18 = 2.8e-18, which\\n        // would round to 3, but this computation produces the result 2.\\n        // No need to use SafeMath because SFP_SCALING_FACTOR != 0.\\n        return Signed(a.rawValue.mul(b.rawValue) / SFP_SCALING_FACTOR);\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256, reverting on overflow.\\n     * @dev This will \\\"floor\\\" the product.\\n     * @param a a FixedPoint.Signed.\\n     * @param b an int256.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mul(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Multiplies two `Signed`s and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 mulRaw = a.rawValue.mul(b.rawValue);\\n        int256 mulTowardsZero = mulRaw / SFP_SCALING_FACTOR;\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = mulRaw % SFP_SCALING_FACTOR;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(mulTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(mulTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies an `Signed` and an unscaled int256 and \\\"ceil's\\\" the product, reverting on overflow.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a FixedPoint.Signed.\\n     * @return the product of `a` and `b`.\\n     */\\n    function mulAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Since b is an int, there is no risk of truncation and we can just mul it normally\\n        return Signed(a.rawValue.mul(b));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        // There are two caveats with this computation:\\n        // 1. Max value for the number dividend `a` represents is ~10^41, otherwise an intermediate value overflows.\\n        // 10^41 is stored internally as an int256 10^59.\\n        // 2. Results that can't be represented exactly are truncated not rounded. E.g., 2 / 3 = 0.6 repeating, which\\n        // would round to 0.666666666666666667, but this computation produces the result 0.666666666666666666.\\n        return Signed(a.rawValue.mul(SFP_SCALING_FACTOR).div(b.rawValue));\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        return Signed(a.rawValue.div(b));\\n    }\\n\\n    /**\\n     * @notice Divides one unscaled int256 by an `Signed`, reverting on overflow or division by 0.\\n     * @dev This will \\\"floor\\\" the quotient.\\n     * @param a an int256 numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function div(int256 a, Signed memory b) internal pure returns (Signed memory) {\\n        return div(fromUnscaledInt(a), b);\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an `Signed` and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b a FixedPoint denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, Signed memory b) internal pure returns (Signed memory) {\\n        int256 aScaled = a.rawValue.mul(SFP_SCALING_FACTOR);\\n        int256 divTowardsZero = aScaled.div(b.rawValue);\\n        // Manual mod because SignedSafeMath doesn't support it.\\n        int256 mod = aScaled % b.rawValue;\\n        if (mod != 0) {\\n            bool isResultPositive = isLessThan(a, 0) == isLessThan(b, 0);\\n            int256 valueToAdd = isResultPositive ? int256(1) : int256(-1);\\n            return Signed(divTowardsZero.add(valueToAdd));\\n        } else {\\n            return Signed(divTowardsZero);\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides one `Signed` by an unscaled int256 and \\\"ceil's\\\" the quotient, reverting on overflow or division by 0.\\n     * @param a a FixedPoint numerator.\\n     * @param b an int256 denominator.\\n     * @return the quotient of `a` divided by `b`.\\n     */\\n    function divAwayFromZero(Signed memory a, int256 b) internal pure returns (Signed memory) {\\n        // Because it is possible that a quotient gets truncated, we can't just call \\\"Signed(a.rawValue.div(b))\\\"\\n        // similarly to mulCeil with an int256 as the second parameter. Therefore we need to convert b into an Signed.\\n        // This creates the possibility of overflow if b is very large.\\n        return divAwayFromZero(a, fromUnscaledInt(b));\\n    }\\n\\n    /**\\n     * @notice Raises an `Signed` to the power of an unscaled uint256, reverting on overflow. E.g., `b=2` squares `a`.\\n     * @dev This will \\\"floor\\\" the result.\\n     * @param a a FixedPoint.Signed.\\n     * @param b a uint256 (negative exponents are not allowed).\\n     * @return output is `a` to the power of `b`.\\n     */\\n    function pow(Signed memory a, uint256 b) internal pure returns (Signed memory output) {\\n        output = fromUnscaledInt(1);\\n        for (uint256 i = 0; i < b; i = i.add(1)) {\\n            output = mul(output, a);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x996b97cc4fa5da4064e3aee500edc6972485d59a9334ceec81155e2c2f484dae\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/common/implementation/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\n */\\ncontract Lockable {\\n    bool private _notEntered;\\n\\n    constructor() {\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\n        // refund coming into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant` function is not supported. It is possible to\\n     * prevent this from happening by making the `nonReentrant` function external, and making it call a `private`\\n     * function that does the actual state modification.\\n     */\\n    modifier nonReentrant() {\\n        _preEntranceCheck();\\n        _preEntranceSet();\\n        _;\\n        _postEntranceReset();\\n    }\\n\\n    /**\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a `nonReentrant()` state-changing method.\\n     */\\n    modifier nonReentrantView() {\\n        _preEntranceCheck();\\n        _;\\n    }\\n\\n    // Internal methods are used to avoid copying the require statement's bytecode to every `nonReentrant()` method.\\n    // On entry into a function, `_preEntranceCheck()` should always be called to check if the function is being\\n    // re-entered. Then, if the function modifies state, it should call `_postEntranceSet()`, perform its logic, and\\n    // then call `_postEntranceReset()`.\\n    // View-only methods can simply call `_preEntranceCheck()` to make sure that it is not being re-entered.\\n    function _preEntranceCheck() internal view {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n\\n    function _preEntranceSet() internal {\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n    }\\n\\n    function _postEntranceReset() internal {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\",\"keccak256\":\"0xcd34b3f83b61a096b53020749f327096d5cacd89c2393d947595afb934496ad4\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary Exclusive {\\n    struct RoleMembership {\\n        address member;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.member == memberToCheck;\\n    }\\n\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\n        roleMembership.member = newMember;\\n    }\\n\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\n        return roleMembership.member;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\n        resetMember(roleMembership, initialMember);\\n    }\\n}\\n\\nlibrary Shared {\\n    struct RoleMembership {\\n        mapping(address => bool) members;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.members[memberToCheck];\\n    }\\n\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\n        roleMembership.members[memberToAdd] = true;\\n    }\\n\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\n        roleMembership.members[memberToRemove] = false;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\n            addMember(roleMembership, initialMembers[i]);\\n        }\\n    }\\n}\\n\\n/**\\n * @title Base class to manage permissions for the derived class.\\n */\\nabstract contract MultiRole {\\n    using Exclusive for Exclusive.RoleMembership;\\n    using Shared for Shared.RoleMembership;\\n\\n    enum RoleType { Invalid, Exclusive, Shared }\\n\\n    struct Role {\\n        uint256 managingRole;\\n        RoleType roleType;\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\n        Shared.RoleMembership sharedRoleMembership;\\n    }\\n\\n    mapping(uint256 => Role) private roles;\\n\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\n     */\\n    modifier onlyRoleHolder(uint256 roleId) {\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\n     */\\n    modifier onlyRoleManager(uint256 roleId) {\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\n     */\\n    modifier onlyExclusive(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\n     */\\n    modifier onlyShared(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Whether `memberToCheck` is a member of roleId.\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\n     * @param roleId the Role to check.\\n     * @param memberToCheck the address to check.\\n     * @return True if `memberToCheck` is a member of `roleId`.\\n     */\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\n        Role storage role = roles[roleId];\\n        if (role.roleType == RoleType.Exclusive) {\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\n        } else if (role.roleType == RoleType.Shared) {\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\n        }\\n        revert(\\\"Invalid roleId\\\");\\n    }\\n\\n    /**\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\n     * initialized, ExclusiveRole.\\n     * @param roleId the ExclusiveRole membership to modify.\\n     * @param newMember the new ExclusiveRole member.\\n     */\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\n     * @param roleId the ExclusiveRole membership to check.\\n     * @return the address of the current ExclusiveRole member.\\n     */\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\n    }\\n\\n    /**\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param newMember the new SharedRole member.\\n     */\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param memberToRemove the current SharedRole member to remove.\\n     */\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes caller from the role, `roleId`.\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\n     * initialized, SharedRole.\\n     * @param roleId the SharedRole membership to modify.\\n     */\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is not initialized.\\n     */\\n    modifier onlyValidRole(uint256 roleId) {\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is initialized.\\n     */\\n    modifier onlyInvalidRole(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMembers` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createSharedRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address[] memory initialMembers\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Shared;\\n        role.managingRole = managingRoleId;\\n        role.sharedRoleMembership.init(initialMembers);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMember` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createExclusiveRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address initialMember\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Exclusive;\\n        role.managingRole = managingRoleId;\\n        role.exclusiveRoleMembership.init(initialMember);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x134c5a2f847832705be631f2b4eb2a3e23a91a2f0e63560abb481e85eeebfae6\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/common/implementation/Testable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Timer.sol\\\";\\n\\n/**\\n * @title Base class that provides time overrides, but only if being run in test mode.\\n */\\nabstract contract Testable {\\n    // If the contract is being run in production, then `timerAddress` will be the 0x0 address.\\n    // Note: this variable should be set on construction and never modified.\\n    address public timerAddress;\\n\\n    /**\\n     * @notice Constructs the Testable contract. Called by child contracts.\\n     * @param _timerAddress Contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(address _timerAddress) {\\n        timerAddress = _timerAddress;\\n    }\\n\\n    /**\\n     * @notice Reverts if not running in test mode.\\n     */\\n    modifier onlyIfTest {\\n        require(timerAddress != address(0x0));\\n        _;\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set current Testable time to.\\n     */\\n    function setCurrentTime(uint256 time) external onlyIfTest {\\n        Timer(timerAddress).setCurrentTime(time);\\n    }\\n\\n    /**\\n     * @notice Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode.\\n     * Otherwise, it will return the block timestamp.\\n     * @return uint for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view virtual returns (uint256) {\\n        if (timerAddress != address(0x0)) {\\n            return Timer(timerAddress).getCurrentTime();\\n        } else {\\n            return block.timestamp; // solhint-disable-line not-rely-on-time\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0254b45747293bb800373a58d123969adec0428f7be79dc941cab10fcad09918\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/common/implementation/Timer.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Universal store of current contract time for testing environments.\\n */\\ncontract Timer {\\n    uint256 private currentTime;\\n\\n    constructor() {\\n        currentTime = block.timestamp; // solhint-disable-line not-rely-on-time\\n    }\\n\\n    /**\\n     * @notice Sets the current time.\\n     * @dev Will revert if not running in test mode.\\n     * @param time timestamp to set `currentTime` to.\\n     */\\n    function setCurrentTime(uint256 time) external {\\n        currentTime = time;\\n    }\\n\\n    /**\\n     * @notice Gets the currentTime variable set in the Timer.\\n     * @return uint256 for the current Testable timestamp.\\n     */\\n    function getCurrentTime() public view returns (uint256) {\\n        return currentTime;\\n    }\\n}\\n\",\"keccak256\":\"0x9e0dd7389718bd5d1da910273a6f4cee98ee22bfc0c92bde0f0955c0e23adb5e\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/common/interfaces/AddressWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\ninterface AddressWhitelistInterface {\\n    function addToWhitelist(address newElement) external;\\n\\n    function removeFromWhitelist(address newElement) external;\\n\\n    function isOnWhitelist(address newElement) external view returns (bool);\\n\\n    function getWhitelist() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x22fb8588dff1d5cff76a28111d6c9b190765d99facd93c8ff3b54771f245c0d8\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/implementation/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Stores common interface names used throughout the DVM by registration in the Finder.\\n */\\nlibrary OracleInterfaces {\\n    bytes32 public constant Oracle = \\\"Oracle\\\";\\n    bytes32 public constant IdentifierWhitelist = \\\"IdentifierWhitelist\\\";\\n    bytes32 public constant Store = \\\"Store\\\";\\n    bytes32 public constant FinancialContractsAdmin = \\\"FinancialContractsAdmin\\\";\\n    bytes32 public constant Registry = \\\"Registry\\\";\\n    bytes32 public constant CollateralWhitelist = \\\"CollateralWhitelist\\\";\\n    bytes32 public constant OptimisticOracle = \\\"OptimisticOracle\\\";\\n    bytes32 public constant Bridge = \\\"Bridge\\\";\\n    bytes32 public constant GenericHandler = \\\"GenericHandler\\\";\\n    bytes32 public constant SkinnyOptimisticOracle = \\\"SkinnyOptimisticOracle\\\";\\n    bytes32 public constant ChildMessenger = \\\"ChildMessenger\\\";\\n    bytes32 public constant OracleHub = \\\"OracleHub\\\";\\n    bytes32 public constant OracleSpoke = \\\"OracleSpoke\\\";\\n}\\n\\n/**\\n * @title Commonly re-used values for contracts associated with the OptimisticOracle.\\n */\\nlibrary OptimisticOracleConstraints {\\n    // Any price request submitted to the OptimisticOracle must contain ancillary data no larger than this value.\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` constant value otherwise it is possible\\n    // that a price can be requested to the OptimisticOracle successfully, but cannot be resolved by the DVM which\\n    // refuses to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n}\\n\",\"keccak256\":\"0x36dcec83c5ac265b759b6a5559ec76088ce24854bf590ba66f808e8ecb59b97e\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/implementation/ContractCreator.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/FinderInterface.sol\\\";\\nimport \\\"../../common/implementation/AddressWhitelist.sol\\\";\\nimport \\\"./Registry.sol\\\";\\nimport \\\"./Constants.sol\\\";\\n\\n/**\\n * @title Base contract for all financial contract creators\\n */\\nabstract contract ContractCreator {\\n    address internal finderAddress;\\n\\n    constructor(address _finderAddress) {\\n        finderAddress = _finderAddress;\\n    }\\n\\n    function _requireWhitelistedCollateral(address collateralAddress) internal view {\\n        FinderInterface finder = FinderInterface(finderAddress);\\n        AddressWhitelist collateralWhitelist =\\n            AddressWhitelist(finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist));\\n        require(collateralWhitelist.isOnWhitelist(collateralAddress), \\\"Collateral not whitelisted\\\");\\n    }\\n\\n    function _registerContract(address[] memory parties, address contractToRegister) internal {\\n        FinderInterface finder = FinderInterface(finderAddress);\\n        Registry registry = Registry(finder.getImplementationAddress(OracleInterfaces.Registry));\\n        registry.registerContract(parties, contractToRegister);\\n    }\\n}\\n\",\"keccak256\":\"0x8e7465ac555b6241a467cc0fae718b752b00113d5690be93f1e2dbb1ac26faa2\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/implementation/Registry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../common/implementation/MultiRole.sol\\\";\\nimport \\\"../interfaces/RegistryInterface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\n/**\\n * @title Registry for financial contracts and approved financial contract creators.\\n * @dev Maintains a whitelist of financial contract creators that are allowed\\n * to register new financial contracts and stores party members of a financial contract.\\n */\\ncontract Registry is RegistryInterface, MultiRole {\\n    using SafeMath for uint256;\\n\\n    /****************************************\\n     *    INTERNAL VARIABLES AND STORAGE    *\\n     ****************************************/\\n\\n    enum Roles {\\n        Owner, // The owner manages the set of ContractCreators.\\n        ContractCreator // Can register financial contracts.\\n    }\\n\\n    // This enum is required because a `WasValid` state is required\\n    // to ensure that financial contracts cannot be re-registered.\\n    enum Validity { Invalid, Valid }\\n\\n    // Local information about a contract.\\n    struct FinancialContract {\\n        Validity valid;\\n        uint128 index;\\n    }\\n\\n    struct Party {\\n        address[] contracts; // Each financial contract address is stored in this array.\\n        // The address of each financial contract is mapped to its index for constant time look up and deletion.\\n        mapping(address => uint256) contractIndex;\\n    }\\n\\n    // Array of all contracts that are approved to use the UMA Oracle.\\n    address[] public registeredContracts;\\n\\n    // Map of financial contract contracts to the associated FinancialContract struct.\\n    mapping(address => FinancialContract) public contractMap;\\n\\n    // Map each party member to their their associated Party struct.\\n    mapping(address => Party) private partyMap;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event NewContractRegistered(address indexed contractAddress, address indexed creator, address[] parties);\\n    event PartyAdded(address indexed contractAddress, address indexed party);\\n    event PartyRemoved(address indexed contractAddress, address indexed party);\\n\\n    /**\\n     * @notice Construct the Registry contract.\\n     */\\n    constructor() {\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\n        // Start with no contract creators registered.\\n        _createSharedRole(uint256(Roles.ContractCreator), uint256(Roles.Owner), new address[](0));\\n    }\\n\\n    /****************************************\\n     *        REGISTRATION FUNCTIONS        *\\n     ****************************************/\\n\\n    /**\\n     * @notice Registers a new financial contract.\\n     * @dev Only authorized contract creators can call this method.\\n     * @param parties array of addresses who become parties in the contract.\\n     * @param contractAddress address of the contract against which the parties are registered.\\n     */\\n    function registerContract(address[] calldata parties, address contractAddress)\\n        external\\n        override\\n        onlyRoleHolder(uint256(Roles.ContractCreator))\\n    {\\n        FinancialContract storage financialContract = contractMap[contractAddress];\\n        require(contractMap[contractAddress].valid == Validity.Invalid, \\\"Can only register once\\\");\\n\\n        // Store contract address as a registered contract.\\n        registeredContracts.push(contractAddress);\\n\\n        // No length check necessary because we should never hit (2^127 - 1) contracts.\\n        financialContract.index = uint128(registeredContracts.length.sub(1));\\n\\n        // For all parties in the array add them to the contract's parties.\\n        financialContract.valid = Validity.Valid;\\n        for (uint256 i = 0; i < parties.length; i = i.add(1)) {\\n            _addPartyToContract(parties[i], contractAddress);\\n        }\\n\\n        emit NewContractRegistered(contractAddress, msg.sender, parties);\\n    }\\n\\n    /**\\n     * @notice Adds a party member to the calling contract.\\n     * @dev msg.sender will be used to determine the contract that this party is added to.\\n     * @param party new party for the calling contract.\\n     */\\n    function addPartyToContract(address party) external override {\\n        address contractAddress = msg.sender;\\n        require(contractMap[contractAddress].valid == Validity.Valid, \\\"Can only add to valid contract\\\");\\n\\n        _addPartyToContract(party, contractAddress);\\n    }\\n\\n    /**\\n     * @notice Removes a party member from the calling contract.\\n     * @dev msg.sender will be used to determine the contract that this party is removed from.\\n     * @param partyAddress address to be removed from the calling contract.\\n     */\\n    function removePartyFromContract(address partyAddress) external override {\\n        address contractAddress = msg.sender;\\n        Party storage party = partyMap[partyAddress];\\n        uint256 numberOfContracts = party.contracts.length;\\n\\n        require(numberOfContracts != 0, \\\"Party has no contracts\\\");\\n        require(contractMap[contractAddress].valid == Validity.Valid, \\\"Remove only from valid contract\\\");\\n        require(isPartyMemberOfContract(partyAddress, contractAddress), \\\"Can only remove existing party\\\");\\n\\n        // Index of the current location of the contract to remove.\\n        uint256 deleteIndex = party.contractIndex[contractAddress];\\n\\n        // Store the last contract's address to update the lookup map.\\n        address lastContractAddress = party.contracts[numberOfContracts - 1];\\n\\n        // Swap the contract to be removed with the last contract.\\n        party.contracts[deleteIndex] = lastContractAddress;\\n\\n        // Update the lookup index with the new location.\\n        party.contractIndex[lastContractAddress] = deleteIndex;\\n\\n        // Pop the last contract from the array and update the lookup map.\\n        party.contracts.pop();\\n        delete party.contractIndex[contractAddress];\\n\\n        emit PartyRemoved(contractAddress, partyAddress);\\n    }\\n\\n    /****************************************\\n     *         REGISTRY STATE GETTERS       *\\n     ****************************************/\\n\\n    /**\\n     * @notice Returns whether the contract has been registered with the registry.\\n     * @dev If it is registered, it is an authorized participant in the UMA system.\\n     * @param contractAddress address of the financial contract.\\n     * @return bool indicates whether the contract is registered.\\n     */\\n    function isContractRegistered(address contractAddress) external view override returns (bool) {\\n        return contractMap[contractAddress].valid == Validity.Valid;\\n    }\\n\\n    /**\\n     * @notice Returns a list of all contracts that are associated with a particular party.\\n     * @param party address of the party.\\n     * @return an array of the contracts the party is registered to.\\n     */\\n    function getRegisteredContracts(address party) external view override returns (address[] memory) {\\n        return partyMap[party].contracts;\\n    }\\n\\n    /**\\n     * @notice Returns all registered contracts.\\n     * @return all registered contract addresses within the system.\\n     */\\n    function getAllRegisteredContracts() external view override returns (address[] memory) {\\n        return registeredContracts;\\n    }\\n\\n    /**\\n     * @notice checks if an address is a party of a contract.\\n     * @param party party to check.\\n     * @param contractAddress address to check against the party.\\n     * @return bool indicating if the address is a party of the contract.\\n     */\\n    function isPartyMemberOfContract(address party, address contractAddress) public view override returns (bool) {\\n        uint256 index = partyMap[party].contractIndex[contractAddress];\\n        return partyMap[party].contracts.length > index && partyMap[party].contracts[index] == contractAddress;\\n    }\\n\\n    /****************************************\\n     *           INTERNAL FUNCTIONS         *\\n     ****************************************/\\n\\n    function _addPartyToContract(address party, address contractAddress) internal {\\n        require(!isPartyMemberOfContract(party, contractAddress), \\\"Can only register a party once\\\");\\n        uint256 contractIndex = partyMap[party].contracts.length;\\n        partyMap[party].contracts.push(contractAddress);\\n        partyMap[party].contractIndex[contractAddress] = contractIndex;\\n\\n        emit PartyAdded(contractAddress, party);\\n    }\\n}\\n\",\"keccak256\":\"0x4c8a06a285774f9d95cd4ffdd17b2829b8dc40a174775b3be9c032e5a3be87f0\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Provides addresses of the live contracts implementing certain interfaces.\\n * @dev Examples are the Oracle or Store interfaces.\\n */\\ninterface FinderInterface {\\n    /**\\n     * @notice Updates the address of the contract that implements `interfaceName`.\\n     * @param interfaceName bytes32 encoding of the interface name that is either changed or registered.\\n     * @param implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function changeImplementationAddress(bytes32 interfaceName, address implementationAddress) external;\\n\\n    /**\\n     * @notice Gets the address of the contract that implements the given `interfaceName`.\\n     * @param interfaceName queried interface.\\n     * @return implementationAddress address of the deployed contract that implements the interface.\\n     */\\n    function getImplementationAddress(bytes32 interfaceName) external view returns (address);\\n}\\n\",\"keccak256\":\"0x9166fbfe08e954eb86d33c114fcde7ce4fd0dda5d9d28b31210582bfc769fa86\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/interfaces/IdentifierWhitelistInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface for whitelists of supported identifiers that the oracle can provide prices for.\\n */\\ninterface IdentifierWhitelistInterface {\\n    /**\\n     * @notice Adds the provided identifier as a supported identifier.\\n     * @dev Price requests using this identifier will succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function addSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Removes the identifier from the whitelist.\\n     * @dev Price requests using this identifier will no longer succeed after this call.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     */\\n    function removeSupportedIdentifier(bytes32 identifier) external;\\n\\n    /**\\n     * @notice Checks whether an identifier is on the whitelist.\\n     * @param identifier bytes32 encoding of the string identifier. Eg: BTC/USD.\\n     * @return bool if the identifier is supported (or not).\\n     */\\n    function isIdentifierSupported(bytes32 identifier) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9ae86a30dd1a8c03fb2c6d27be570bb30c4c0b13ac63cde8620b7e4b51d88dc9\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/interfaces/OptimisticOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Financial contract facing Oracle interface.\\n * @dev Interface used by financial contracts to interact with the Oracle. Voters will use a different interface.\\n */\\nabstract contract OptimisticOracleInterface {\\n    // Struct representing the state of a price request.\\n    enum State {\\n        Invalid, // Never requested.\\n        Requested, // Requested, no other actions taken.\\n        Proposed, // Proposed, but not expired or disputed yet.\\n        Expired, // Proposed, not disputed, past liveness.\\n        Disputed, // Disputed, but no DVM price returned yet.\\n        Resolved, // Disputed and DVM price is available.\\n        Settled // Final price has been set in the contract (can get here from Expired or Resolved).\\n    }\\n\\n    // Struct representing a price request.\\n    struct Request {\\n        address proposer; // Address of the proposer.\\n        address disputer; // Address of the disputer.\\n        IERC20 currency; // ERC20 token used to pay rewards and fees.\\n        bool settled; // True if the request is settled.\\n        bool refundOnDispute; // True if the requester should be refunded their reward on dispute.\\n        int256 proposedPrice; // Price that the proposer submitted.\\n        int256 resolvedPrice; // Price resolved once the request is settled.\\n        uint256 expirationTime; // Time at which the request auto-settles without a dispute.\\n        uint256 reward; // Amount of the currency to pay to the proposer on settlement.\\n        uint256 finalFee; // Final fee to pay to the Store upon request to the DVM.\\n        uint256 bond; // Bond that the proposer and disputer must pay on top of the final fee.\\n        uint256 customLiveness; // Custom liveness value set by the requester.\\n    }\\n\\n    // This value must be <= the Voting contract's `ancillaryBytesLimit` value otherwise it is possible\\n    // that a price can be requested to this contract successfully, but cannot be disputed because the DVM refuses\\n    // to accept a price request made with ancillary data length over a certain size.\\n    uint256 public constant ancillaryBytesLimit = 8192;\\n\\n    /**\\n     * @notice Requests a new price.\\n     * @param identifier price identifier being requested.\\n     * @param timestamp timestamp of the price being requested.\\n     * @param ancillaryData ancillary data representing additional args being passed with the price request.\\n     * @param currency ERC20 token used for payment of rewards and fees. Must be approved for use with the DVM.\\n     * @param reward reward offered to a successful proposer. Will be pulled from the caller. Note: this can be 0,\\n     *               which could make sense if the contract requests and proposes the value in the same call or\\n     *               provides its own reward system.\\n     * @return totalBond default bond (final fee) + final fee that the proposer and disputer will be required to pay.\\n     * This can be changed with a subsequent call to setBond().\\n     */\\n    function requestPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        IERC20 currency,\\n        uint256 reward\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Set the proposal bond associated with a price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param bond custom bond amount to set.\\n     * @return totalBond new bond + final fee that the proposer and disputer will be required to pay. This can be\\n     * changed again with a subsequent call to setBond().\\n     */\\n    function setBond(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 bond\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Sets the request to refund the reward if the proposal is disputed. This can help to \\\"hedge\\\" the caller\\n     * in the event of a dispute-caused delay. Note: in the event of a dispute, the winner still receives the other's\\n     * bond, so there is still profit to be made even if the reward is refunded.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     */\\n    function setRefundOnDispute(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual;\\n\\n    /**\\n     * @notice Sets a custom liveness value for the request. Liveness is the amount of time a proposal must wait before\\n     * being auto-resolved.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param customLiveness new custom liveness.\\n     */\\n    function setCustomLiveness(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        uint256 customLiveness\\n    ) external virtual;\\n\\n    /**\\n     * @notice Proposes a price value on another address' behalf. Note: this address will receive any rewards that come\\n     * from this proposal. However, any bonds are pulled from the caller.\\n     * @param proposer address to set as the proposer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePriceFor(\\n        address proposer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Proposes a price value for an existing price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @param proposedPrice price being proposed.\\n     * @return totalBond the amount that's pulled from the proposer's wallet as a bond. The bond will be returned to\\n     * the proposer once settled if the proposal is correct.\\n     */\\n    function proposePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData,\\n        int256 proposedPrice\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price request with an active proposal on another address' behalf. Note: this address will\\n     * receive any rewards that come from this dispute. However, any bonds are pulled from the caller.\\n     * @param disputer address to set as the disputer.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the caller's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was value (the proposal was incorrect).\\n     */\\n    function disputePriceFor(\\n        address disputer,\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Disputes a price value for an existing price request with an active proposal.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return totalBond the amount that's pulled from the disputer's wallet as a bond. The bond will be returned to\\n     * the disputer once settled if the dispute was valid (the proposal was incorrect).\\n     */\\n    function disputePrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 totalBond);\\n\\n    /**\\n     * @notice Retrieves a price that was previously requested by a caller. Reverts if the request is not settled\\n     * or settleable. Note: this method is not view so that this call may actually settle the price request if it\\n     * hasn't been settled.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return resolved price.\\n     */\\n    function settleAndGetPrice(\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (int256);\\n\\n    /**\\n     * @notice Attempts to settle an outstanding price request. Will revert if it isn't settleable.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return payout the amount that the \\\"winner\\\" (proposer or disputer) receives on settlement. This amount includes\\n     * the returned bonds as well as additional rewards.\\n     */\\n    function settle(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) external virtual returns (uint256 payout);\\n\\n    /**\\n     * @notice Gets the current data structure containing all information about a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the Request data structure.\\n     */\\n    function getRequest(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (Request memory);\\n\\n    /**\\n     * @notice Returns the state of a price request.\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return the State enum value.\\n     */\\n    function getState(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (State);\\n\\n    /**\\n     * @notice Checks if a given request has resolved or been settled (i.e the optimistic oracle has a price).\\n     * @param requester sender of the initial price request.\\n     * @param identifier price identifier to identify the existing request.\\n     * @param timestamp timestamp to identify the existing request.\\n     * @param ancillaryData ancillary data of the price being requested.\\n     * @return true if price has resolved or settled, false otherwise.\\n     */\\n    function hasPrice(\\n        address requester,\\n        bytes32 identifier,\\n        uint256 timestamp,\\n        bytes memory ancillaryData\\n    ) public view virtual returns (bool);\\n\\n    function stampAncillaryData(bytes memory ancillaryData, address requester)\\n        public\\n        view\\n        virtual\\n        returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x92e7280c1abd5f0c4fcd20247fc1b8428aaf4eeea59439c074d15fdaf9c64989\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/oracle/interfaces/RegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Interface for a registry of contracts and contract creators.\\n */\\ninterface RegistryInterface {\\n    /**\\n     * @notice Registers a new contract.\\n     * @dev Only authorized contract creators can call this method.\\n     * @param parties an array of addresses who become parties in the contract.\\n     * @param contractAddress defines the address of the deployed contract.\\n     */\\n    function registerContract(address[] calldata parties, address contractAddress) external;\\n\\n    /**\\n     * @notice Returns whether the contract has been registered with the registry.\\n     * @dev If it is registered, it is an authorized participant in the UMA system.\\n     * @param contractAddress address of the contract.\\n     * @return bool indicates whether the contract is registered.\\n     */\\n    function isContractRegistered(address contractAddress) external view returns (bool);\\n\\n    /**\\n     * @notice Returns a list of all contracts that are associated with a particular party.\\n     * @param party address of the party.\\n     * @return an array of the contracts the party is registered to.\\n     */\\n    function getRegisteredContracts(address party) external view returns (address[] memory);\\n\\n    /**\\n     * @notice Returns all registered contracts.\\n     * @return all registered contract addresses within the system.\\n     */\\n    function getAllRegisteredContracts() external view returns (address[] memory);\\n\\n    /**\\n     * @notice Adds a party to the calling contract.\\n     * @dev msg.sender must be the contract to which the party member is added.\\n     * @param party address to be added to the contract.\\n     */\\n    function addPartyToContract(address party) external;\\n\\n    /**\\n     * @notice Removes a party member to the calling contract.\\n     * @dev msg.sender must be the contract to which the party member is added.\\n     * @param party address to be removed from the contract.\\n     */\\n    function removePartyFromContract(address party) external;\\n\\n    /**\\n     * @notice checks if an address is a party in a contract.\\n     * @param party party to check.\\n     * @param contractAddress address to check against the party.\\n     * @return bool indicating if the address is a party of the contract.\\n     */\\n    function isPartyMemberOfContract(address party, address contractAddress) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6cfbe07afe35ce4c35ee2a265e015eb6caefdc224f17d7d3c3b751b4bd6c6d31\",\"license\":\"AGPL-3.0-only\"},\"contracts/OptimisticDepositBox.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"@uma/core/contracts/common/implementation/FixedPoint.sol\\\";\\nimport \\\"@uma/core/contracts/common/implementation/AddressWhitelist.sol\\\";\\nimport \\\"@uma/core/contracts/common/implementation/Testable.sol\\\";\\nimport \\\"@uma/core/contracts/common/implementation/Lockable.sol\\\";\\n\\nimport \\\"@uma/core/contracts/oracle/interfaces/FinderInterface.sol\\\";\\nimport \\\"@uma/core/contracts/oracle/interfaces/IdentifierWhitelistInterface.sol\\\";\\nimport \\\"@uma/core/contracts/oracle/interfaces/OptimisticOracleInterface.sol\\\";\\nimport \\\"@uma/core/contracts/oracle/implementation/ContractCreator.sol\\\";\\n\\n/**\\n * @title Optimistic Token Deposit Box\\n * @notice This is a minimal example of a financial template that depends on price requests from the Optimistic Oracle.\\n * This contract should be thought of as a \\\"Deposit Box\\\" into which the user deposits some ERC20 collateral.\\n * The main feature of this box is that the user can withdraw their ERC20 corresponding to a desired USD amount.\\n * When the user wants to make a withdrawal, a price request is made to the Optimistic Oracle.\\n * For simplicity, the user is constrained to have one outstanding withdrawal request at any given time.\\n * Final fees are charged to the proposer of a price but not to the contract making a price request.\\n *\\n * This example is intended to accompany a technical tutorial for how to integrate the Optimistic Oracle into a project.\\n * The main feature this demo serves to showcase is how to build a financial product on-chain that \\\"pulls\\\" price\\n * requests from the Optimistic Oracle on-demand, which is an implementation of the \\\"priceless\\\" oracle framework.\\n *\\n * The typical user flow would be:\\n * - User sets up a deposit box for the ETH/USD price-identifier.\\n *   The \\\"collateral currency\\\" in this deposit box is therefore wETH.\\n *   The user can subsequently make withdrawal requests for USD-denominated amounts of wETH.\\n * - User deposits 10 wETH into their deposit box.\\n * - User later requests to withdraw $10,000 USD of wETH.\\n * - OptimisticDepositBox asks Optimistic Oracle for latest ETH/USD exchange rate.\\n * - Optimistic Oracle resolves the exchange rate at: 1 wETH is worth 2000 USD.\\n * - OptimisticDepositBox transfers 5 wETH to user.\\n */\\ncontract OptimisticDepositBox is Testable, Lockable {\\n    using SafeMath for uint256;\\n    using FixedPoint for FixedPoint.Unsigned;\\n    using SafeERC20 for IERC20;\\n\\n    // Represents a single caller's deposit box. All collateral is held by this contract.\\n    struct OptimisticDepositBoxData {\\n        // Requested amount of collateral, denominated in the quote asset of the price identifier.\\n        // Example: If the price identifier is ETH/USD, and the `withdrawalRequestAmount = 1000`, then\\n        // this represents a withdrawal request for 1000 USD worth of wETH.\\n        uint256 withdrawalRequestAmount;\\n        // Timestamp of the latest withdrawal request. A withdrawal request is pending if `withdrawalRequestTimestamp != 0`.\\n        uint256 withdrawalRequestTimestamp;\\n        // Collateral value.\\n        uint256 collateral;\\n    }\\n\\n    // Maps addresses to their deposit boxes. Each address can have only one position.\\n    mapping(address => OptimisticDepositBoxData) private depositBoxes;\\n\\n    // Unique identifier for price feed ticker.\\n    bytes32 private priceIdentifier;\\n\\n    // Finder for UMA contracts.\\n    FinderInterface finder;\\n\\n    // The collateral currency used to back the positions in this contract.\\n    IERC20 public collateralCurrency;\\n\\n    // Total collateral of all depositors.\\n    uint256 public totalOptimisticDepositBoxCollateral;\\n\\n    /****************************************\\n     *                EVENTS                *\\n     ****************************************/\\n\\n    event NewOptimisticDepositBox(address indexed user);\\n    event EndedOptimisticDepositBox(address indexed user);\\n    event Deposit(address indexed user, uint256 indexed collateralAmount);\\n    event RequestWithdrawal(address indexed user, uint256 indexed collateralAmount, uint256 withdrawalRequestTimestamp);\\n    event RequestWithdrawalExecuted(\\n        address indexed user,\\n        uint256 indexed collateralAmount,\\n        uint256 exchangeRate,\\n        uint256 withdrawalRequestTimestamp\\n    );\\n    event RequestWithdrawalCanceled(\\n        address indexed user,\\n        uint256 indexed collateralAmount,\\n        uint256 withdrawalRequestTimestamp\\n    );\\n\\n    /****************************************\\n     *               MODIFIERS              *\\n     ****************************************/\\n\\n    modifier noPendingWithdrawal(address user) {\\n        _depositBoxHasNoPendingWithdrawal(user);\\n        _;\\n    }\\n\\n    /****************************************\\n     *           PUBLIC FUNCTIONS           *\\n     ****************************************/\\n\\n    /**\\n     * @notice Construct the OptimisticDepositBox.\\n     * @param _collateralAddress ERC20 token to be deposited.\\n     * @param _finderAddress UMA protocol Finder used to discover other protocol contracts.\\n     * @param _priceIdentifier registered in the DVM, used to price the ERC20 deposited.\\n     * The price identifier consists of a \\\"base\\\" asset and a \\\"quote\\\" asset. The \\\"base\\\" asset corresponds\\n     * to the collateral ERC20 currency deposited into this account, and it is denominated in the \\\"quote\\\"\\n     * asset on withdrawals.\\n     * An example price identifier would be \\\"ETH/USD\\\" which will resolve and return the USD price of ETH.\\n     * @param _timerAddress contract that stores the current time in a testing environment.\\n     * Must be set to 0x0 for production environments that use live time.\\n     */\\n    constructor(\\n        address _collateralAddress,\\n        address _finderAddress,\\n        bytes32 _priceIdentifier,\\n        address _timerAddress\\n    ) nonReentrant() Testable(_timerAddress) {\\n        finder = FinderInterface(_finderAddress);\\n        require(_getIdentifierWhitelist().isIdentifierSupported(_priceIdentifier), \\\"Unsupported price identifier\\\");\\n        require(_getAddressWhitelist().isOnWhitelist(_collateralAddress), \\\"Unsupported collateral type\\\");\\n        collateralCurrency = IERC20(_collateralAddress);\\n        priceIdentifier = _priceIdentifier;\\n    }\\n\\n    /**\\n     * @notice Transfers `collateralAmount` of `collateralCurrency` into caller's deposit box.\\n     * @dev This contract must be approved to spend at least `collateralAmount` of `collateralCurrency`.\\n     * @param collateralAmount total amount of collateral tokens to be sent to the sponsor's position.\\n     */\\n    function deposit(uint256 collateralAmount) public nonReentrant {\\n        require(collateralAmount > 0, \\\"Invalid collateral amount\\\");\\n        OptimisticDepositBoxData storage depositBoxData = depositBoxes[msg.sender];\\n        if (depositBoxData.collateral == 0) {\\n            emit NewOptimisticDepositBox(msg.sender);\\n        }\\n\\n        // Increase the individual deposit box and global collateral balance by collateral amount.\\n        depositBoxData.collateral = depositBoxData.collateral.add(collateralAmount);\\n        totalOptimisticDepositBoxCollateral = totalOptimisticDepositBoxCollateral.add(collateralAmount);\\n\\n        emit Deposit(msg.sender, collateralAmount);\\n\\n        // Move collateral currency from sender to contract.\\n        collateralCurrency.safeTransferFrom(msg.sender, address(this), collateralAmount);\\n    }\\n\\n    /**\\n     * @notice Starts a withdrawal request that allows the sponsor to withdraw `denominatedCollateralAmount`\\n     * from their position denominated in the quote asset of the price identifier, following a Optimistic\\n     * Oracle price resolution.\\n     * @dev The request will be pending for the duration of the liveness period and can be cancelled at any\\n     * time. Only one withdrawal request can exist for the user.\\n     * @param denominatedCollateralAmount the quote-asset denominated amount of collateral requested to\\n     * withdraw.\\n     */\\n    function requestWithdrawal(uint256 denominatedCollateralAmount)\\n        public\\n        noPendingWithdrawal(msg.sender)\\n        nonReentrant\\n    {\\n        OptimisticDepositBoxData storage depositBoxData = depositBoxes[msg.sender];\\n        require(denominatedCollateralAmount > 0, \\\"Invalid collateral amount\\\");\\n\\n        // Update the position data for the user.\\n        depositBoxData.withdrawalRequestAmount = denominatedCollateralAmount;\\n        depositBoxData.withdrawalRequestTimestamp = getCurrentTime();\\n\\n        emit RequestWithdrawal(msg.sender, denominatedCollateralAmount, depositBoxData.withdrawalRequestTimestamp);\\n\\n        // A price request is sent for the current timestamp.\\n        _requestOraclePrice(depositBoxData.withdrawalRequestTimestamp);\\n    }\\n\\n    /**\\n     * @notice After a withdrawal request (i.e., by a call to `requestWithdrawal`) and optimistic oracle\\n     * price resolution, withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency\\n     * denominated in the quote asset.\\n     * @dev Might not withdraw the full requested amount in order to account for precision loss.\\n     * @return amountWithdrawn The actual amount of collateral withdrawn.\\n     */\\n    function executeWithdrawal() external nonReentrant returns (uint256 amountWithdrawn) {\\n        OptimisticDepositBoxData storage depositBoxData = depositBoxes[msg.sender];\\n        require(\\n            depositBoxData.withdrawalRequestTimestamp != 0 &&\\n                depositBoxData.withdrawalRequestTimestamp <= getCurrentTime(),\\n            \\\"Invalid withdraw request\\\"\\n        );\\n\\n        // Get the resolved price or revert.\\n        // Note that in practice, you may have to do some additional math here to deal with scaling in the oracle price.\\n        uint256 exchangeRate = _getOraclePrice(depositBoxData.withdrawalRequestTimestamp);\\n\\n        // Calculate denomated amount of collateral based on resolved exchange rate.\\n        // Example 1: User wants to withdraw $1000 of ETH, exchange rate is $2000/ETH, therefore user to receive 0.5 ETH.\\n        // Example 2: User wants to withdraw $2500 of ETH, exchange rate is $2000/ETH, therefore user to receive 1.25 ETH.\\n        uint256 denominatedAmountToWithdraw = FixedPoint\\n            .Unsigned(depositBoxData.withdrawalRequestAmount)\\n            .div(FixedPoint.Unsigned(exchangeRate))\\n            .rawValue;\\n\\n        // If withdrawal request amount is > collateral, then withdraw the full collateral amount.\\n        if (denominatedAmountToWithdraw >= depositBoxData.collateral) {\\n            denominatedAmountToWithdraw = depositBoxData.collateral;\\n            emit EndedOptimisticDepositBox(msg.sender);\\n        }\\n\\n        // Decrease the individual deposit box and global collateral balance.\\n        depositBoxData.collateral = depositBoxData.collateral.sub(denominatedAmountToWithdraw);\\n        totalOptimisticDepositBoxCollateral = totalOptimisticDepositBoxCollateral.sub(denominatedAmountToWithdraw);\\n\\n        emit RequestWithdrawalExecuted(\\n            msg.sender,\\n            denominatedAmountToWithdraw,\\n            exchangeRate,\\n            depositBoxData.withdrawalRequestTimestamp\\n        );\\n\\n        // Reset withdrawal request by setting withdrawal request timestamp to 0.\\n        _resetWithdrawalRequest(depositBoxData);\\n\\n        // Transfer approved withdrawal amount from the contract to the caller.\\n        collateralCurrency.safeTransfer(msg.sender, denominatedAmountToWithdraw);\\n        return denominatedAmountToWithdraw;\\n    }\\n\\n    /**\\n     * @notice Cancels a pending withdrawal request.\\n     */\\n    function cancelWithdrawal() external nonReentrant {\\n        OptimisticDepositBoxData storage depositBoxData = depositBoxes[msg.sender];\\n        require(depositBoxData.withdrawalRequestTimestamp != 0, \\\"No pending withdrawal\\\");\\n\\n        emit RequestWithdrawalCanceled(\\n            msg.sender,\\n            depositBoxData.withdrawalRequestAmount,\\n            depositBoxData.withdrawalRequestTimestamp\\n        );\\n\\n        // Reset withdrawal request by setting withdrawal request timestamp and withdrawal amount to 0.\\n        _resetWithdrawalRequest(depositBoxData);\\n    }\\n\\n    /**\\n     * @notice Accessor method for a user's collateral.\\n     * @param user address whose collateral amount is retrieved.\\n     * @return the collateral amount in the deposit box (i.e. available for withdrawal).\\n     */\\n    function getCollateral(address user) external view nonReentrantView returns (uint256) {\\n        return depositBoxes[user].collateral;\\n    }\\n\\n    /****************************************\\n     *          INTERNAL FUNCTIONS          *\\n     ****************************************/\\n\\n    // Requests a price for `priceIdentifier` at `requestedTime` from the Optimistic Oracle.\\n    function _requestOraclePrice(uint256 requestedTime) internal {\\n        OptimisticOracleInterface oracle = _getOptimisticOracle();\\n        // For other use cases, you may need ancillary data or a reward. Here, they are both zero.\\n        oracle.requestPrice(priceIdentifier, requestedTime, \\\"\\\", IERC20(collateralCurrency), 0);\\n    }\\n\\n    function _resetWithdrawalRequest(OptimisticDepositBoxData storage depositBoxData) internal {\\n        depositBoxData.withdrawalRequestAmount = 0;\\n        depositBoxData.withdrawalRequestTimestamp = 0;\\n    }\\n\\n    function _depositBoxHasNoPendingWithdrawal(address user) internal view {\\n        require(depositBoxes[user].withdrawalRequestTimestamp == 0, \\\"Pending withdrawal\\\");\\n    }\\n\\n    function _getOptimisticOracle() internal view returns (OptimisticOracleInterface) {\\n        return OptimisticOracleInterface(finder.getImplementationAddress(OracleInterfaces.OptimisticOracle));\\n    }\\n\\n    function _getIdentifierWhitelist() internal view returns (IdentifierWhitelistInterface) {\\n        return IdentifierWhitelistInterface(finder.getImplementationAddress(OracleInterfaces.IdentifierWhitelist));\\n    }\\n\\n    function _getAddressWhitelist() internal view returns (AddressWhitelist) {\\n        return AddressWhitelist(finder.getImplementationAddress(OracleInterfaces.CollateralWhitelist));\\n    }\\n\\n    // Fetches a resolved oracle price from the Optimistic Oracle. Reverts if the oracle hasn't resolved for this request.\\n    function _getOraclePrice(uint256 withdrawalRequestTimestamp) internal returns (uint256) {\\n        OptimisticOracleInterface oracle = _getOptimisticOracle();\\n        require(\\n            oracle.hasPrice(address(this), priceIdentifier, withdrawalRequestTimestamp, \\\"\\\"),\\n            \\\"Unresolved oracle price\\\"\\n        );\\n        int256 oraclePrice = oracle.settleAndGetPrice(priceIdentifier, withdrawalRequestTimestamp, \\\"\\\");\\n\\n        // For simplicity we don't want to deal with negative prices.\\n        if (oraclePrice < 0) {\\n            oraclePrice = 0;\\n        }\\n        return uint256(oraclePrice);\\n    }\\n}\\n\",\"keccak256\":\"0xcda84c3b4ad1eadcdc9f911d89e05699a90120aaacfdf7d972b49564c1076c29\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620019a7380380620019a78339810160408190526200003491620003c7565b600080546001600160a81b0319166001600160a01b03831617600160a01b1790556200005f62000265565b620000726000805460ff60a01b19169055565b600380546001600160a01b0319166001600160a01b03851617905562000097620002c2565b6001600160a01b03166390978d1b836040518263ffffffff1660e01b8152600401620000c591815260200190565b602060405180830381865afa158015620000e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200010991906200041b565b6200015b5760405162461bcd60e51b815260206004820152601c60248201527f556e737570706f72746564207072696365206964656e7469666965720000000060448201526064015b60405180910390fd5b6200016562000358565b604051631d1d5b3960e11b81526001600160a01b0386811660048301529190911690633a3ab67290602401602060405180830381865afa158015620001ae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001d491906200041b565b620002225760405162461bcd60e51b815260206004820152601b60248201527f556e737570706f7274656420636f6c6c61746572616c20747970650000000000604482015260640162000152565b600480546001600160a01b0319166001600160a01b03861617905560028290556200025b6000805460ff60a01b1916600160a01b179055565b5050505062000464565b600054600160a01b900460ff16620002c05760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640162000152565b565b6003546040516302abf57960e61b81527f4964656e74696669657257686974656c6973740000000000000000000000000060048201526000916001600160a01b03169063aafd5e40906024015b602060405180830381865afa1580156200032d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000353919062000446565b905090565b6003546040516302abf57960e61b81527f436f6c6c61746572616c57686974656c6973740000000000000000000000000060048201526000916001600160a01b03169063aafd5e40906024016200030f565b80516001600160a01b0381168114620003c257600080fd5b919050565b60008060008060808587031215620003de57600080fd5b620003e985620003aa565b9350620003f960208601620003aa565b9250604085015191506200041060608601620003aa565b905092959194509250565b6000602082840312156200042e57600080fd5b815180151581146200043f57600080fd5b9392505050565b6000602082840312156200045957600080fd5b6200043f82620003aa565b61153380620004746000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c80639b56d6c911610076578063b6b55f251161005b578063b6b55f2514610186578063dfddabaa14610199578063fa45aa00146101a257600080fd5b80639b56d6c9146101605780639ee679e81461017357600080fd5b806322611280116100a7578063226112801461012d57806322f8e5661461013757806329cb924d1461014a57600080fd5b80630de15fd9146100c35780631c39c38d1461010d575b600080fd5b6004546100e39073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6000546100e39073ffffffffffffffffffffffffffffffffffffffff1681565b6101356101aa565b005b6101356101453660046112de565b6102ef565b610152610398565b604051908152602001610104565b61015261016e366004611319565b610453565b6101356101813660046112de565b610489565b6101356101943660046112de565b6105dd565b61015260055481565b610152610781565b6101b26109a4565b6101df600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b336000908152600160208190526040822090810154909103610262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f2070656e64696e67207769746864726177616c000000000000000000000060448201526064015b60405180910390fd5b8054600182015460405190815233907fb158ea6c33db5aec992a08be94850f984ed987f3d524e5ec7d0662b689093b149060200160405180910390a360008082556001820155506102ed600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b565b60005473ffffffffffffffffffffffffffffffffffffffff1661031157600080fd5b6000546040517f22f8e5660000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff909116906322f8e56690602401600060405180830381600087803b15801561037d57600080fd5b505af1158015610391573d6000803e3d6000fd5b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff161561044b5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329cb924d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104469190611336565b905090565b504290565b90565b600061045d6109a4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090206002015490565b3361049381610a28565b61049b6109a4565b6104c8600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b3360009081526001602052604090208261053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420636f6c6c61746572616c20616d6f756e74000000000000006044820152606401610259565b828155610549610398565b60018201819055604051908152839033907fadf0d81321571e1d83f52cfa9faf7add412d39431677ee21583f0d8998a9c8389060200160405180910390a36105948160010154610ab9565b506105d9600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b5050565b6105e56109a4565b610612600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b6000811161067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420636f6c6c61746572616c20616d6f756e74000000000000006044820152606401610259565b33600090815260016020526040812060028101549091036106c35760405133907f5b4f05768e926839c662b50d15b54a8dc09e7bcecdc5555797b36befc536be7990600090a25b60028101546106d29083610b87565b60028201556005546106e49083610b87565b600555604051829033907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90600090a36004546107399073ffffffffffffffffffffffffffffffffffffffff16333085610b9a565b5061077e600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b50565b600061078b6109a4565b6107b8600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b33600090815260016020819052604090912090810154158015906107e757506107df610398565b816001015411155b61084d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c6964207769746864726177207265717565737400000000000000006044820152606401610259565b600061085c8260010154610c7c565b60408051602080820183528382528251908101909252845482529192506000916108869190610e60565b51600284015490915081106108c75750600282015460405133907ffaef2b8b7c70f0da0a2ba1eb9e2b903a20a3b6004f0199a097e39be70119f5a890600090a25b60028301546108d69082610ea5565b60028401556005546108e89082610ea5565b6005556001830154604080518481526020810192909252829133917f1489278b1433363140f0068698af68fad66f0f617b6cabe5710540b57397de42910160405180910390a36000808455600184015560045461095c9073ffffffffffffffffffffffffffffffffffffffff163383610eb1565b92505050610450600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b60005474010000000000000000000000000000000000000000900460ff166102ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610259565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020819052604090912001541561077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f50656e64696e67207769746864726177616c00000000000000000000000000006044820152606401610259565b6000610ac3610f07565b600254600480546040517f11df92f1000000000000000000000000000000000000000000000000000000008152918201929092526024810185905260a06044820152600060a4820181905273ffffffffffffffffffffffffffffffffffffffff928316606483015260848201529192508216906311df92f19060c4016020604051808303816000875af1158015610b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b829190611336565b505050565b6000610b93828461137e565b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610c769085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610fba565b50505050565b600080610c87610f07565b6002546040517fbc58ccaa000000000000000000000000000000000000000000000000000000008152306004820152602481019190915260448101859052608060648201526000608482015290915073ffffffffffffffffffffffffffffffffffffffff82169063bc58ccaa9060a401602060405180830381865afa158015610d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d389190611396565b610d9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f556e7265736f6c766564206f7261636c652070726963650000000000000000006044820152606401610259565b6002546040517f53b59239000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052606060448201526000606482018190529073ffffffffffffffffffffffffffffffffffffffff8316906353b59239906084016020604051808303816000875af1158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190611336565b90506000811215610b93575060009392505050565b6040805160208101909152600081526040805160208101909152825184518291610e9c91610e9690670de0b6b3a76400006110c6565b906110d2565b90529392505050565b6000610b9382846113b8565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610b829084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610bf4565b6003546040517faafd5e400000000000000000000000000000000000000000000000000000000081527f4f7074696d69737469634f7261636c6500000000000000000000000000000000600482015260009173ffffffffffffffffffffffffffffffffffffffff169063aafd5e4090602401602060405180830381865afa158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044691906113cf565b600061101c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110de9092919063ffffffff16565b805190915015610b82578080602001905181019061103a9190611396565b610b82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610259565b6000610b9382846113ec565b6000610b938284611429565b60606110ed84846000856110f5565b949350505050565b606082471015611187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610259565b73ffffffffffffffffffffffffffffffffffffffff85163b611205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610259565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161122e9190611490565b60006040518083038185875af1925050503d806000811461126b576040519150601f19603f3d011682016040523d82523d6000602084013e611270565b606091505b509150915061128082828661128b565b979650505050505050565b6060831561129a575081610b93565b8251156112aa5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025991906114ac565b6000602082840312156112f057600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461077e57600080fd5b60006020828403121561132b57600080fd5b8135610b93816112f7565b60006020828403121561134857600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156113915761139161134f565b500190565b6000602082840312156113a857600080fd5b81518015158114610b9357600080fd5b6000828210156113ca576113ca61134f565b500390565b6000602082840312156113e157600080fd5b8151610b93816112f7565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156114245761142461134f565b500290565b60008261145f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60005b8381101561147f578181015183820152602001611467565b83811115610c765750506000910152565b600082516114a2818460208701611464565b9190910192915050565b60208152600082518060208401526114cb816040850160208701611464565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220e6a4b65f07c0127d9cded9dd5275491c7cfa06e9a31987800624141213d1a5b464736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c80639b56d6c911610076578063b6b55f251161005b578063b6b55f2514610186578063dfddabaa14610199578063fa45aa00146101a257600080fd5b80639b56d6c9146101605780639ee679e81461017357600080fd5b806322611280116100a7578063226112801461012d57806322f8e5661461013757806329cb924d1461014a57600080fd5b80630de15fd9146100c35780631c39c38d1461010d575b600080fd5b6004546100e39073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6000546100e39073ffffffffffffffffffffffffffffffffffffffff1681565b6101356101aa565b005b6101356101453660046112de565b6102ef565b610152610398565b604051908152602001610104565b61015261016e366004611319565b610453565b6101356101813660046112de565b610489565b6101356101943660046112de565b6105dd565b61015260055481565b610152610781565b6101b26109a4565b6101df600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b336000908152600160208190526040822090810154909103610262576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f2070656e64696e67207769746864726177616c000000000000000000000060448201526064015b60405180910390fd5b8054600182015460405190815233907fb158ea6c33db5aec992a08be94850f984ed987f3d524e5ec7d0662b689093b149060200160405180910390a360008082556001820155506102ed600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b565b60005473ffffffffffffffffffffffffffffffffffffffff1661031157600080fd5b6000546040517f22f8e5660000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff909116906322f8e56690602401600060405180830381600087803b15801561037d57600080fd5b505af1158015610391573d6000803e3d6000fd5b5050505050565b6000805473ffffffffffffffffffffffffffffffffffffffff161561044b5760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166329cb924d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610422573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104469190611336565b905090565b504290565b90565b600061045d6109a4565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526001602052604090206002015490565b3361049381610a28565b61049b6109a4565b6104c8600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b3360009081526001602052604090208261053e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420636f6c6c61746572616c20616d6f756e74000000000000006044820152606401610259565b828155610549610398565b60018201819055604051908152839033907fadf0d81321571e1d83f52cfa9faf7add412d39431677ee21583f0d8998a9c8389060200160405180910390a36105948160010154610ab9565b506105d9600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b5050565b6105e56109a4565b610612600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b6000811161067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e76616c696420636f6c6c61746572616c20616d6f756e74000000000000006044820152606401610259565b33600090815260016020526040812060028101549091036106c35760405133907f5b4f05768e926839c662b50d15b54a8dc09e7bcecdc5555797b36befc536be7990600090a25b60028101546106d29083610b87565b60028201556005546106e49083610b87565b600555604051829033907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c90600090a36004546107399073ffffffffffffffffffffffffffffffffffffffff16333085610b9a565b5061077e600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b50565b600061078b6109a4565b6107b8600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff169055565b33600090815260016020819052604090912090810154158015906107e757506107df610398565b816001015411155b61084d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e76616c6964207769746864726177207265717565737400000000000000006044820152606401610259565b600061085c8260010154610c7c565b60408051602080820183528382528251908101909252845482529192506000916108869190610e60565b51600284015490915081106108c75750600282015460405133907ffaef2b8b7c70f0da0a2ba1eb9e2b903a20a3b6004f0199a097e39be70119f5a890600090a25b60028301546108d69082610ea5565b60028401556005546108e89082610ea5565b6005556001830154604080518481526020810192909252829133917f1489278b1433363140f0068698af68fad66f0f617b6cabe5710540b57397de42910160405180910390a36000808455600184015560045461095c9073ffffffffffffffffffffffffffffffffffffffff163383610eb1565b92505050610450600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1674010000000000000000000000000000000000000000179055565b60005474010000000000000000000000000000000000000000900460ff166102ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610259565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020819052604090912001541561077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f50656e64696e67207769746864726177616c00000000000000000000000000006044820152606401610259565b6000610ac3610f07565b600254600480546040517f11df92f1000000000000000000000000000000000000000000000000000000008152918201929092526024810185905260a06044820152600060a4820181905273ffffffffffffffffffffffffffffffffffffffff928316606483015260848201529192508216906311df92f19060c4016020604051808303816000875af1158015610b5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b829190611336565b505050565b6000610b93828461137e565b9392505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610c769085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152610fba565b50505050565b600080610c87610f07565b6002546040517fbc58ccaa000000000000000000000000000000000000000000000000000000008152306004820152602481019190915260448101859052608060648201526000608482015290915073ffffffffffffffffffffffffffffffffffffffff82169063bc58ccaa9060a401602060405180830381865afa158015610d14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d389190611396565b610d9e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f556e7265736f6c766564206f7261636c652070726963650000000000000000006044820152606401610259565b6002546040517f53b59239000000000000000000000000000000000000000000000000000000008152600481019190915260248101849052606060448201526000606482018190529073ffffffffffffffffffffffffffffffffffffffff8316906353b59239906084016020604051808303816000875af1158015610e27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4b9190611336565b90506000811215610b93575060009392505050565b6040805160208101909152600081526040805160208101909152825184518291610e9c91610e9690670de0b6b3a76400006110c6565b906110d2565b90529392505050565b6000610b9382846113b8565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052610b829084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401610bf4565b6003546040517faafd5e400000000000000000000000000000000000000000000000000000000081527f4f7074696d69737469634f7261636c6500000000000000000000000000000000600482015260009173ffffffffffffffffffffffffffffffffffffffff169063aafd5e4090602401602060405180830381865afa158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044691906113cf565b600061101c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166110de9092919063ffffffff16565b805190915015610b82578080602001905181019061103a9190611396565b610b82576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610259565b6000610b9382846113ec565b6000610b938284611429565b60606110ed84846000856110f5565b949350505050565b606082471015611187576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610259565b73ffffffffffffffffffffffffffffffffffffffff85163b611205576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610259565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161122e9190611490565b60006040518083038185875af1925050503d806000811461126b576040519150601f19603f3d011682016040523d82523d6000602084013e611270565b606091505b509150915061128082828661128b565b979650505050505050565b6060831561129a575081610b93565b8251156112aa5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161025991906114ac565b6000602082840312156112f057600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461077e57600080fd5b60006020828403121561132b57600080fd5b8135610b93816112f7565b60006020828403121561134857600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156113915761139161134f565b500190565b6000602082840312156113a857600080fd5b81518015158114610b9357600080fd5b6000828210156113ca576113ca61134f565b500390565b6000602082840312156113e157600080fd5b8151610b93816112f7565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156114245761142461134f565b500290565b60008261145f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b60005b8381101561147f578181015183820152602001611467565b83811115610c765750506000910152565b600082516114a2818460208701611464565b9190910192915050565b60208152600082518060208401526114cb816040850160208701611464565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220e6a4b65f07c0127d9cded9dd5275491c7cfa06e9a31987800624141213d1a5b464736f6c634300080d0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_collateralAddress": "ERC20 token to be deposited.",
          "_finderAddress": "UMA protocol Finder used to discover other protocol contracts.",
          "_priceIdentifier": "registered in the DVM, used to price the ERC20 deposited. The price identifier consists of a \"base\" asset and a \"quote\" asset. The \"base\" asset corresponds to the collateral ERC20 currency deposited into this account, and it is denominated in the \"quote\" asset on withdrawals. An example price identifier would be \"ETH/USD\" which will resolve and return the USD price of ETH.",
          "_timerAddress": "contract that stores the current time in a testing environment. Must be set to 0x0 for production environments that use live time."
        }
      },
      "deposit(uint256)": {
        "details": "This contract must be approved to spend at least `collateralAmount` of `collateralCurrency`.",
        "params": {
          "collateralAmount": "total amount of collateral tokens to be sent to the sponsor's position."
        }
      },
      "executeWithdrawal()": {
        "details": "Might not withdraw the full requested amount in order to account for precision loss.",
        "returns": {
          "amountWithdrawn": "The actual amount of collateral withdrawn."
        }
      },
      "getCollateral(address)": {
        "params": {
          "user": "address whose collateral amount is retrieved."
        },
        "returns": {
          "_0": "the collateral amount in the deposit box (i.e. available for withdrawal)."
        }
      },
      "getCurrentTime()": {
        "returns": {
          "_0": "uint for the current Testable timestamp."
        }
      },
      "requestWithdrawal(uint256)": {
        "details": "The request will be pending for the duration of the liveness period and can be cancelled at any time. Only one withdrawal request can exist for the user.",
        "params": {
          "denominatedCollateralAmount": "the quote-asset denominated amount of collateral requested to withdraw."
        }
      },
      "setCurrentTime(uint256)": {
        "details": "Will revert if not running in test mode.",
        "params": {
          "time": "timestamp to set current Testable time to."
        }
      }
    },
    "title": "Optimistic Token Deposit Box",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelWithdrawal()": {
        "notice": "Cancels a pending withdrawal request."
      },
      "constructor": {
        "notice": "Construct the OptimisticDepositBox."
      },
      "deposit(uint256)": {
        "notice": "Transfers `collateralAmount` of `collateralCurrency` into caller's deposit box."
      },
      "executeWithdrawal()": {
        "notice": "After a withdrawal request (i.e., by a call to `requestWithdrawal`) and optimistic oracle price resolution, withdraws `depositBoxData.withdrawalRequestAmount` of collateral currency denominated in the quote asset."
      },
      "getCollateral(address)": {
        "notice": "Accessor method for a user's collateral."
      },
      "getCurrentTime()": {
        "notice": "Gets the current time. Will return the last time set in `setCurrentTime` if running in test mode. Otherwise, it will return the block timestamp."
      },
      "requestWithdrawal(uint256)": {
        "notice": "Starts a withdrawal request that allows the sponsor to withdraw `denominatedCollateralAmount` from their position denominated in the quote asset of the price identifier, following a Optimistic Oracle price resolution."
      },
      "setCurrentTime(uint256)": {
        "notice": "Sets the current time."
      }
    },
    "notice": "This is a minimal example of a financial template that depends on price requests from the Optimistic Oracle. This contract should be thought of as a \"Deposit Box\" into which the user deposits some ERC20 collateral. The main feature of this box is that the user can withdraw their ERC20 corresponding to a desired USD amount. When the user wants to make a withdrawal, a price request is made to the Optimistic Oracle. For simplicity, the user is constrained to have one outstanding withdrawal request at any given time. Final fees are charged to the proposer of a price but not to the contract making a price request. This example is intended to accompany a technical tutorial for how to integrate the Optimistic Oracle into a project. The main feature this demo serves to showcase is how to build a financial product on-chain that \"pulls\" price requests from the Optimistic Oracle on-demand, which is an implementation of the \"priceless\" oracle framework. The typical user flow would be: - User sets up a deposit box for the ETH/USD price-identifier.   The \"collateral currency\" in this deposit box is therefore wETH.   The user can subsequently make withdrawal requests for USD-denominated amounts of wETH. - User deposits 10 wETH into their deposit box. - User later requests to withdraw $10,000 USD of wETH. - OptimisticDepositBox asks Optimistic Oracle for latest ETH/USD exchange rate. - Optimistic Oracle resolves the exchange rate at: 1 wETH is worth 2000 USD. - OptimisticDepositBox transfers 5 wETH to user.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3642,
        "contract": "contracts/OptimisticDepositBox.sol:OptimisticDepositBox",
        "label": "timerAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2955,
        "contract": "contracts/OptimisticDepositBox.sol:OptimisticDepositBox",
        "label": "_notEntered",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4746,
        "contract": "contracts/OptimisticDepositBox.sol:OptimisticDepositBox",
        "label": "depositBoxes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(OptimisticDepositBoxData)4741_storage)"
      },
      {
        "astId": 4748,
        "contract": "contracts/OptimisticDepositBox.sol:OptimisticDepositBox",
        "label": "priceIdentifier",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 4751,
        "contract": "contracts/OptimisticDepositBox.sol:OptimisticDepositBox",
        "label": "finder",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(FinderInterface)4384"
      },
      {
        "astId": 4754,
        "contract": "contracts/OptimisticDepositBox.sol:OptimisticDepositBox",
        "label": "collateralCurrency",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IERC20)182"
      },
      {
        "astId": 4756,
        "contract": "contracts/OptimisticDepositBox.sol:OptimisticDepositBox",
        "label": "totalOptimisticDepositBoxCollateral",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(FinderInterface)4384": {
        "encoding": "inplace",
        "label": "contract FinderInterface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)182": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(OptimisticDepositBoxData)4741_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct OptimisticDepositBox.OptimisticDepositBoxData)",
        "numberOfBytes": "32",
        "value": "t_struct(OptimisticDepositBoxData)4741_storage"
      },
      "t_struct(OptimisticDepositBoxData)4741_storage": {
        "encoding": "inplace",
        "label": "struct OptimisticDepositBox.OptimisticDepositBoxData",
        "members": [
          {
            "astId": 4736,
            "contract": "contracts/OptimisticDepositBox.sol:OptimisticDepositBox",
            "label": "withdrawalRequestAmount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4738,
            "contract": "contracts/OptimisticDepositBox.sol:OptimisticDepositBox",
            "label": "withdrawalRequestTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 4740,
            "contract": "contracts/OptimisticDepositBox.sol:OptimisticDepositBox",
            "label": "collateral",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
